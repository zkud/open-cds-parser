EntityDeclaration: EntityDeclarationTerm = {
  <start: @L> <define:Define?> <entity:Entity> <identifier:Identifier> <structure:Structure> <semicolumn:Semicolumn?> <end: @R> => {
    let location = Location::new(start, end, filepath);
    let define = define.map(|d| Box::new(d));
    let semicolumn = semicolumn.map(|s| Box::new(s));
    EntityDeclarationTerm::new(
      location, 
      define,
      Box::new(entity),
      Box::new(identifier),
      None,
      Vec::new(),
      Box::new(structure),
      semicolumn,
    )
  },
  <start: @L> <define:Define?> <entity:Entity> <identifier:Identifier> <colon:Colon> <aspects:AppliedAspects> <structure:Structure> <semicolumn:Semicolumn?> <end: @R> => {
    let location = Location::new(start, end, filepath);
    let define = define.map(|d| Box::new(d));
    let semicolumn = semicolumn.map(|s| Box::new(s));
    EntityDeclarationTerm::new(
      location,
      define,
      Box::new(entity),
      Box::new(identifier),
      Some(Box::new(colon)),
      aspects,
      Box::new(structure),
      semicolumn,
    )
  }
}

AppliedAspects: Vec<AppliedAspectSegment> = {
  <aspect:Identifier> => {
    let mut aspects: Vec<AppliedAspectSegment> = Vec::new();
    aspects.push(AppliedAspectSegment::Aspect(aspect));
    aspects
  },
  <aspects:AppliedAspects> <comma:Comma> <aspect:Identifier> => {
    let mut new_aspects: Vec<AppliedAspectSegment> = Vec::new();
    new_aspects.extend(aspects);
    new_aspects.push(AppliedAspectSegment::Comma(comma));
    new_aspects.push(AppliedAspectSegment::Aspect(aspect));
    new_aspects
  }
}
