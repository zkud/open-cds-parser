EntityDeclaration: EntityDeclarationTerm = {
  <start: @L> <define:Define?> <entity:Entity> <identifier:Identifier> <structure:Structure> <semicolumn:Semicolumn?> <end: @R> => {
    let location = Location::new(start, end, filepath);
    let define = define.map(|d| Box::new(d));
    let semicolumn = semicolumn.map(|s| Box::new(s));
    EntityDeclarationTerm::new(
      location, 
      define,
      Box::new(entity),
      Box::new(identifier),
      None,
      Vec::new(),
      Box::new(structure),
      semicolumn,
    )
  },
  <start: @L> <define:Define?> <entity:Entity> <identifier:Identifier> <colon:Colon> <aspects:AspectNames> <structure:Structure> <semicolumn:Semicolumn?> <end: @R> => {
    let location = Location::new(start, end, filepath);
    let define = define.map(|d| Box::new(d));
    let semicolumn = semicolumn.map(|s| Box::new(s));
    EntityDeclarationTerm::new(
      location,
      define,
      Box::new(entity),
      Box::new(identifier),
      Some(Box::new(colon)),
      aspects,
      Box::new(structure),
      semicolumn,
    )
  }
}

AspectNames: Vec<IdentifierTerm> = {
  <aspect_name:Identifier> => {
    let mut aspect_names: Vec<IdentifierTerm> = Vec::new();
    aspect_names.push(aspect_name);
    aspect_names
  },
  <aspect_names:AspectNames> <comma:Comma> <aspect_name:Identifier> => {
    let mut new_aspect_names: Vec<IdentifierTerm> = Vec::new();
    new_aspect_names.extend(aspect_names);
    new_aspect_names.push(aspect_name);
    new_aspect_names
  }
}
