TypeDeclaration: TypeDeclarationTerm = {
    <start: @L> <define:Define?> <type_keyword:Type> <identifier:Identifier> <colon:Colon> <resolved_type:TypeReference> <semi:Semicolumn> <end: @R> => {
        let location = Location::new(start, end, filepath);
        let define = define.map(|d| Box::new(d));
        let colon = Some(Box::new(colon));
        TypeDeclarationTerm::new(
            location,
            define,
            Box::new(type_keyword),
            Box::new(identifier),
            colon,
            Box::new(resolved_type),
            Box::new(semi)
        )
    },
    // Syntax sugar for quick structured types
    <start: @L> <define:Define?> <type_keyword:Type> <identifier:Identifier> <structure:Structure> <semi:Semicolumn> <end: @R> => {
        let location = Location::new(start, end, filepath);
        let define = define.map(|d| Box::new(d));
        let type_reference_location = structure.location().clone();
        let type_details_variant = TypeDetailsVariant::Structured(structure);
        let type_reference = TypeReferenceTerm::new(type_reference_location, None, Box::new(type_details_variant));
        TypeDeclarationTerm::new(
            location,
            define,
            Box::new(type_keyword),
            Box::new(identifier),
            None,
            Box::new(type_reference),
            Box::new(semi)
        )
    },
}

TypeReference: TypeReferenceTerm = {
    <start: @L> <type_details:TypeDetails> <end: @R> => {
        let location = Location::new(start, end, filepath);
        TypeReferenceTerm::new(location, None, Box::new(type_details))
    },
    <start: @L> <array:Array> <of:Of> <type_details:TypeDetails> <end: @R> => {
        let location = Location::new(start, end, filepath);
        let array_prefix = ArrayPrefix::ArrayOf {
            array: Box::new(array), 
            of: Box::new(of),
        };
        TypeReferenceTerm::new(location, Some(array_prefix), Box::new(type_details))
    },
    <start: @L> <many:Many> <type_details:TypeDetails> <end: @R> => {
        let location = Location::new(start, end, filepath);
        let array_prefix = ArrayPrefix::Many(Box::new(many));
        TypeReferenceTerm::new(location, Some(array_prefix), Box::new(type_details))
    },
}

TypeDetails: TypeDetailsVariant = {
    <simple:SimpleTypeDetails> => TypeDetailsVariant::Simple(simple),
    <structure:Structure> => TypeDetailsVariant::Structured(structure),
}

SimpleTypeDetails: SimpleTypeDetailsTerm = {
    <start: @L> <identifier:Identifier> <end: @R> => {
        let location = Location::new(start, end, filepath);
        SimpleTypeDetailsTerm::new(location, Box::new(identifier))
    },
}

