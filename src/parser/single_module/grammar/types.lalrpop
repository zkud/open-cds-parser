TypeDeclaration: TypeDeclarationTerm = {
    <start: @L> <define:Define> <type_keyword:Type> <identifier:Identifier> <colon:Colon> <resolved_type:TypeReference> <semi:Semicolumn> <end: @R> => {
        let location = Location::new(start, end, filepath);
	let define = Some(Box::new(define));
        TypeDeclarationTerm::new(
	    location,
	    define,
	    Box::new(type_keyword),
	    Box::new(identifier),
	    Box::new(resolved_type)
	)
    },
    <start: @L> <type_keyword:Type> <identifier:Identifier> <colon:Colon> <resolved_type:TypeReference> <semi:Semicolumn> <end: @R> => {
        let location = Location::new(start, end, filepath);
        TypeDeclarationTerm::new(
	    location,
	    None,
	    Box::new(type_keyword),
	    Box::new(identifier),
	    Box::new(resolved_type)
	)
    }
}

TypeReference: TypeReferenceTerm = {
    <start: @L> <type_details:TypeDetails> <end: @R> => {
        let location = Location::new(start, end, filepath);
        TypeReferenceTerm::new(location, None, Box::new(type_details))
    },
    <start: @L> <array:Array> <of:Of> <type_details:TypeDetails> <end: @R> => {
        let location = Location::new(start, end, filepath);
        let array_prefix = ArrayPrefix::ArrayOf {
            array: Box::new(array), 
            of: Box::new(of),
        };
        TypeReferenceTerm::new(location, Some(array_prefix), Box::new(type_details))
    },
    <start: @L> <many:Many> <type_details:TypeDetails> <end: @R> => {
        let location = Location::new(start, end, filepath);
        let array_prefix = ArrayPrefix::Many(Box::new(many));
        TypeReferenceTerm::new(location, Some(array_prefix), Box::new(type_details))
    },
}

TypeDetails: TypeDetailsVariant = {
    <simple:SimpleTypeDetails> => TypeDetailsVariant::Simple(simple),
    <structured:StructuredTypeDetails> => TypeDetailsVariant::Structured(structured),
}

SimpleTypeDetails: SimpleTypeDetailsTerm = {
    <start: @L> <identifier:Identifier> <end: @R> => {
        let location = Location::new(start, end, filepath);
        SimpleTypeDetailsTerm::new(location, Box::new(identifier))
    },
}

StructuredTypeDetails: StructuredTypeDetailsTerm = {
    <start: @L> <open:OpenCurlyBrace> <close:CloseCurlyBrace> <end: @R> => {
        let location = Location::new(start, end, filepath);
        StructuredTypeDetailsTerm::new(location)
    },
}

