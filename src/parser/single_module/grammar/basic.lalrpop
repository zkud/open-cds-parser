As: KeywordTerm = {
  <start: @L> "as" <end: @R> => {
    let location = Location::new(start, end, filepath);
    KeywordTerm::new(location, Keyword::As)
  },
}

OpenRoundBracket: PunctuationSignTerm = {
  <start: @L> "(" <end: @R> => {
    let location = Location::new(start, end, filepath);
    PunctuationSignTerm::new(location, PunctuationSign::OpenRoundBracket)
  },
}

CloseRoundBracket: PunctuationSignTerm = {
  <start: @L> ")" <end: @R> => {
    let location = Location::new(start, end, filepath);
    PunctuationSignTerm::new(location, PunctuationSign::CloseRoundBracket)
  },
}

OpenCurlyBrace: PunctuationSignTerm = {
  <start: @L> "{" <end: @R> => {
    let location = Location::new(start, end, filepath);
    PunctuationSignTerm::new(location, PunctuationSign::OpenCurlyBrace)
  },
}

CloseCurlyBrace: PunctuationSignTerm = {
  <start: @L> "}" <end: @R> => {
    let location = Location::new(start, end, filepath);
    PunctuationSignTerm::new(location, PunctuationSign::CloseCurlyBrace)
  },
}

Comma: PunctuationSignTerm = {
  <start: @L> "," <end: @R> => {
    let location = Location::new(start, end, filepath);
    PunctuationSignTerm::new(location, PunctuationSign::Comma)
  },
}

Dot: PunctuationSignTerm = {
  <start: @L> "." <end: @R> => {
    let location = Location::new(start, end, filepath);
    PunctuationSignTerm::new(location, PunctuationSign::Dot)
  },
}

Semicolumn: PunctuationSignTerm = {
  <start: @L> ";" <end: @R> => {
    let location = Location::new(start, end, filepath);
    PunctuationSignTerm::new(location, PunctuationSign::Semicolumn)
  },
}

Wildcart: PunctuationSignTerm = {
  <start: @L> "*" <end: @R> => {
    let location = Location::new(start, end, filepath);
    PunctuationSignTerm::new(location, PunctuationSign::Wildcart)
  },
}

Colon: PunctuationSignTerm = {
  <start: @L> ":" <end: @R> => {
    let location = Location::new(start, end, filepath);
    PunctuationSignTerm::new(location, PunctuationSign::Colon)
  },
}

Using: KeywordTerm = {
    <start: @L> "using" <end: @R> => {
        let location = Location::new(start, end, filepath);
        KeywordTerm::new(location, Keyword::Using)
    },
}

Action: KeywordTerm = {
    <start:@L> "action" <end:@R> => {
        let location = Location::new(start, end, filepath);
        KeywordTerm::new(location, Keyword::Action)
    }
};

Function: KeywordTerm = {
  <start: @L> "function" <end: @R> => {
    let location = Location::new(start, end, filepath);
    KeywordTerm::new(location, Keyword::Function)
  },
}

Returns: KeywordTerm = {
  <start: @L> "returns" <end: @R> => {
    let location = Location::new(start, end, filepath);
    KeywordTerm::new(location, Keyword::Returns)
  },
}

Array: KeywordTerm = {
    <start: @L> "array" <end: @R> => {
        let location = Location::new(start, end, filepath);
        KeywordTerm::new(location, Keyword::Array)
    },
}

Many: KeywordTerm = {
    <start: @L> "many" <end: @R> => {
        let location = Location::new(start, end, filepath);
        KeywordTerm::new(location, Keyword::Many)
    },
}

Of: KeywordTerm = {
    <start: @L> "of" <end: @R> => {
        let location = Location::new(start, end, filepath);
        KeywordTerm::new(location, Keyword::Of)
    },
}

From: KeywordTerm = {
  <start: @L> "from" <end: @R> => {
    let location = Location::new(start, end, filepath);
    KeywordTerm::new(location, Keyword::From)
  }
}

Define: KeywordTerm = {
  <start: @L> "define" <end: @R> => {
    let location = Location::new(start, end, filepath);
    KeywordTerm::new(location, Keyword::Define)
  }
}

Type: KeywordTerm = {
  <start: @L> "type" <end: @R> => {
    let location = Location::new(start, end, filepath);
    KeywordTerm::new(location, Keyword::Type)
  }
}

Entity: KeywordTerm = {
  <start: @L> "entity" <end: @R> => {
    let location = Location::new(start, end, filepath);
    KeywordTerm::new(location, Keyword::Entity)
  }
}

Service: KeywordTerm = {
  <start: @L> "service" <end: @R> => {
    let location = Location::new(start, end, filepath);
    KeywordTerm::new(location, Keyword::Service)
  }
}

Namespace: KeywordTerm = {
  <start: @L> "namespace" <end: @R> => {
    let location = Location::new(start, end, filepath);
    KeywordTerm::new(location, Keyword::Namespace)
  }
}

Key: KeywordTerm = {
  <start: @L> "key" <end: @R> => {
    let location = Location::new(start, end, filepath);
    KeywordTerm::new(location, Keyword::Key)
  }
}
