TypeDeclaration: TypeDeclarationTerm = {
  <start: @L> "define" "type" <identifier:Identifier> ":" <resolved_type_identifier:Identifier> ";" <end: @R> => {
    let location = Location::new(start, end, filepath);
    TypeDeclarationTerm::new(location, Box::new(identifier), Box::new(resolved_type_identifier))
  },
  <start: @L> "type" <identifier:Identifier> ":" <resolved_type_identifier:Identifier> ";" <end: @R> => {
    let location = Location::new(start, end, filepath);
    TypeDeclarationTerm::new(location, Box::new(identifier), Box::new(resolved_type_identifier))
  }
}

TypeReference: TypeReferenceTerm = {
  <start: @L> <type_details:TypeDetails> <end: @R> => {
    let location = Location::new(start, end, filepath);
    TypeReferenceTerm::new_scalar(location, Box::new(type_details))
  },
  <start: @L> "array" "of" <type_details:TypeDetails> <end: @R> => {
    let location = Location::new(start, end, filepath);
    TypeReferenceTerm::new_arrayed(location, Box::new(type_details))
  },
  <start: @L> "many" <type_details:TypeDetails> <end: @R> => {
    let location = Location::new(start, end, filepath);
    TypeReferenceTerm::new_arrayed(location, Box::new(type_details))
  },
}

TypeDetails: TypeDetailsVariant = {
  <simple: SimpleTypeDetails> => {
    TypeDetailsVariant::Simple(simple)
  },
  <structured: StructuredTypeDetails> => {
    TypeDetailsVariant::Structured(structured)
  },
}

SimpleTypeDetails: SimpleTypeDetailsTerm = {
  <start: @L> <identifier:Identifier> <end: @R> => {
    let location = Location::new(start, end, filepath);
    SimpleTypeDetailsTerm::new(location, Box::new(identifier))
  },
}

StructuredTypeDetails: StructuredTypeDetailsTerm = {
  <start: @L> "{" "}" <end: @R> => {
    let location = Location::new(start, end, filepath);
    StructuredTypeDetailsTerm::new(location)
  },
}
