ActionDeclaration: ActionDeclarationTerm = {
  <start: @L> <action:Action> <name:Name> <open_bracket:OpenRoundBracket> <params:Params> <close_bracket:CloseRoundBracket> <semicolumn: Semicolumn> <end: @R> => {
    let location = Location::new(start, end, filepath);
    ActionDeclarationTerm::new(
      location,
      Box::new(action),
      Box::new(name),
      Box::new(open_bracket),
      params,
      Box::new(close_bracket), 
      None,
      Box::new(semicolumn)
    )
  },
  <start: @L> <action:Action> <name:Name> <open_bracket:OpenRoundBracket> <params:Params> <close_bracket:CloseRoundBracket> "returns" <returns:Returns> <semicolumn: Semicolumn> <end: @R> => {
    let location = Location::new(start, end, filepath);
    ActionDeclarationTerm::new(
      location,
      Box::new(action),
      Box::new(name),
      Box::new(open_bracket),
      params,
      Box::new(close_bracket),
      Some(Box::new(returns)),
      Box::new(semicolumn)
    )
  }
};

Action: ActionTerm = {
  <start: @L> "action" <end: @R> => {
    let location = Location::new(start, end, filepath);
    ActionTerm::new(location)
  },
}

Params: Vec<ParamTerm> = {
  <param:Param> => {
    let mut params: Vec<ParamTerm> = Vec::new();
    params.push(param);
    params
  },
  <params:Params> <param:Param> => {
    let mut new_params: Vec<ParamTerm> = Vec::new();
    new_params.extend(params);
    new_params.push(param);
    new_params
  },
}

Param: ParamTerm = {
  <name:Name> ":" <type_name:Name> => ParamTerm::new(Box::new(name), Box::new(type_name))
}

Returns: ReturnsTerm = {
  <name:Name> => ReturnsTerm::new_scalar(Box::new(name)),
  "array" "of" <name:Name> => ReturnsTerm::new_arrayed(Box::new(name)),
}

Function: FunctionTerm = {
  "function" <name:Name> <open_bracket:OpenRoundBracket> <close_bracket:CloseRoundBracket> "returns" <returns:Returns> ";" => {
    FunctionTerm::new(Box::new(name), Vec::new(), Box::new(returns))
  },
  "function" <name:Name> <open_bracket:OpenRoundBracket> <params:Params> <close_bracket:CloseRoundBracket> "returns" <returns:Returns> ";" => {
    FunctionTerm::new(Box::new(name), params, Box::new(returns))
  }
};
