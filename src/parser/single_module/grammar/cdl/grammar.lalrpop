pub Module: ModuleTerm = {
  <definitions:ModuleDefinitions> => {
    ModuleTerm::new(definitions)
  },
}

ModuleDefinitions: Vec<ModuleDefinition> = {
  <entity:Entity> => {
    let mut definitions: Vec<ModuleDefinition> = Vec::new();
    definitions.push(ModuleDefinition::Entity(entity));
    definitions
  },
  <service:Service> => {
    let mut definitions: Vec<ModuleDefinition> = Vec::new();
    definitions.push(ModuleDefinition::Service(service));
    definitions
  },
  <type_definition:TypeDeclaration> => {
    let mut definitions: Vec<ModuleDefinition> = Vec::new();
    definitions.push(ModuleDefinition::Type(type_definition));
    definitions
  },
  <import:Import> => {
    let mut definitions: Vec<ModuleDefinition> = Vec::new();
    definitions.push(ModuleDefinition::Import(import));
    definitions
  },
  <definitions:ModuleDefinitions> <entity:Entity> => {
    let mut new_definitions = Vec::new();
    new_definitions.extend(definitions);
    new_definitions.push(ModuleDefinition::Entity(entity));
    new_definitions
  },
  <definitions:ModuleDefinitions> <service:Service> => {
    let mut new_definitions = Vec::new();
    new_definitions.extend(definitions);
    new_definitions.push(ModuleDefinition::Service(service));
    new_definitions
  },
  <definitions:ModuleDefinitions> <type_definition:TypeDeclaration> => {
    let mut new_definitions = Vec::new();
    new_definitions.extend(definitions);
    new_definitions.push(ModuleDefinition::Type(type_definition));
    new_definitions
  },
  <definitions:ModuleDefinitions> <import:Import> => {
    let mut new_definitions = Vec::new();
    new_definitions.extend(definitions);
    new_definitions.push(ModuleDefinition::Import(import));
    new_definitions
  }
}

Service: ServiceTerm = {
  "service" <identifier:Identifier> "{" "}" => {
    ServiceTerm::new(Box::new(identifier), Vec::new())
  },
  "service" <identifier:Identifier> "{" <definitions:ServiceDefinitions> "}" => {
    ServiceTerm::new(Box::new(identifier), definitions)
  },
}

ServiceDefinitions: Vec<ServiceDefinition> = {
  <entity:Entity> => {
    let mut definitions: Vec<ServiceDefinition> = Vec::new();
    definitions.push(ServiceDefinition::Entity(entity));
    definitions
  },
  <action:ActionDeclaration> => {
    let mut definitions: Vec<ServiceDefinition> = Vec::new();
    definitions.push(ServiceDefinition::Action(action));
    definitions
  },
  <function:FunctionDeclaration> => {
    let mut definitions: Vec<ServiceDefinition> = Vec::new();
    definitions.push(ServiceDefinition::Function(function));
    definitions
  },
  <type_definition:TypeDeclaration> => {
    let mut definitions: Vec<ServiceDefinition> = Vec::new();
    definitions.push(ServiceDefinition::Type(type_definition));
    definitions
  },
  <definitions:ServiceDefinitions> <entity:Entity> => {
    let mut new_definitions = Vec::new();
    new_definitions.extend(definitions);
    new_definitions.push(ServiceDefinition::Entity(entity));
    new_definitions
  },
  <definitions:ServiceDefinitions> <action:ActionDeclaration> => {
    let mut new_definitions = Vec::new();
    new_definitions.extend(definitions);
    new_definitions.push(ServiceDefinition::Action(action));
    new_definitions
  },
  <definitions:ServiceDefinitions> <function:FunctionDeclaration> => {
    let mut new_definitions = Vec::new();
    new_definitions.extend(definitions);
    new_definitions.push(ServiceDefinition::Function(function));
    new_definitions
  },
  <definitions:ServiceDefinitions> <type_definition:TypeDeclaration> => {
    let mut new_definitions = Vec::new();
    new_definitions.extend(definitions);
    new_definitions.push(ServiceDefinition::Type(type_definition));
    new_definitions
  },
}

Entity: EntityTerm = {
  "entity" <identifier:Identifier> "{" "}" => {
    EntityTerm::new(Box::new(identifier), Vec::new(), Vec::new())
  },
  "entity" <identifier:Identifier> "{" <fields:Fields> "}" => {
    EntityTerm::new(Box::new(identifier), Vec::new(), fields)
  },
  "entity" <identifier:Identifier> ":" <aspects:AspectNames> "{" "}" => {
    EntityTerm::new(Box::new(identifier), aspects, Vec::new())
  },
  "entity" <identifier:Identifier> ":" <aspects:AspectNames> "{" <fields:Fields> "}" => {
    EntityTerm::new(Box::new(identifier), aspects, fields)
  }
}

AspectNames: Vec<IdentifierTerm> = {
  <aspect_name:Identifier> => {
    let mut aspect_names: Vec<IdentifierTerm> = Vec::new();
    aspect_names.push(aspect_name);
    aspect_names
  },
  <aspect_names:AspectNames> "," <aspect_name:Identifier> => {
    let mut new_aspect_names: Vec<IdentifierTerm> = Vec::new();
    new_aspect_names.extend(aspect_names);
    new_aspect_names.push(aspect_name);
    new_aspect_names
  }
}

Fields: Vec<FieldTerm> = {
  <field:Field> => {
    let mut fields: Vec<FieldTerm> = Vec::new();
    fields.push(field);
    fields
  },
  <fields:Fields> <field:Field> => {
    let mut new_fields: Vec<FieldTerm> = Vec::new();
    new_fields.extend(fields);
    new_fields.push(field);
    new_fields
  }
}

Field: FieldTerm = {
  <identifier:Identifier> ":" <type_name:Identifier> ";" => FieldTerm::new(Box::new(identifier), Box::new(type_name))
}

From: FromTerm = {
  "from" => FromTerm::new(),
}

Using: UsingTerm = {
  <start: @L> "using" <end: @R> => {
    let location = Location::new(start, end, filepath);
    UsingTerm::new(location)
  },
}

Path: PathTerm = {
  <value:r"`[a-zA-Z0-9-/[.]]+`"> => {
    let trimmed_value = value.to_string().trim_matches('`').to_string();
    PathTerm::new(PathBuf::from(trimmed_value))
  },
  <value:r"'[a-zA-Z0-9-/[.]]+'"> => {
    let trimmed_value = value.to_string().trim_matches('\'').to_string();
    PathTerm::new(PathBuf::from(trimmed_value))
  },
}
