use crate::ast::*;
use std::path::{Path, PathBuf};

grammar(filepath: &Path);

pub Module: ModuleTerm = {
  <definitions:ModuleDefinitions> => {
    ModuleTerm::new(definitions)
  },
}

ModuleDefinitions: Vec<ModuleDefinition> = {
  <entity:Entity> => {
    let mut definitions: Vec<ModuleDefinition> = Vec::new();
    definitions.push(ModuleDefinition::Entity(entity));
    definitions
  },
  <service:Service> => {
    let mut definitions: Vec<ModuleDefinition> = Vec::new();
    definitions.push(ModuleDefinition::Service(service));
    definitions
  },
  <type_definition:Type> => {
    let mut definitions: Vec<ModuleDefinition> = Vec::new();
    definitions.push(ModuleDefinition::Type(type_definition));
    definitions
  },
  <import:Import> => {
    let mut definitions: Vec<ModuleDefinition> = Vec::new();
    definitions.push(ModuleDefinition::Import(import));
    definitions
  },
  <definitions:ModuleDefinitions> <entity:Entity> => {
    let mut new_definitions = Vec::new();
    new_definitions.extend(definitions);
    new_definitions.push(ModuleDefinition::Entity(entity));
    new_definitions
  },
  <definitions:ModuleDefinitions> <service:Service> => {
    let mut new_definitions = Vec::new();
    new_definitions.extend(definitions);
    new_definitions.push(ModuleDefinition::Service(service));
    new_definitions
  },
  <definitions:ModuleDefinitions> <type_definition:Type> => {
    let mut new_definitions = Vec::new();
    new_definitions.extend(definitions);
    new_definitions.push(ModuleDefinition::Type(type_definition));
    new_definitions
  },
  <definitions:ModuleDefinitions> <import:Import> => {
    let mut new_definitions = Vec::new();
    new_definitions.extend(definitions);
    new_definitions.push(ModuleDefinition::Import(import));
    new_definitions
  }
}

Service: ServiceTerm = {
  "service" <name:Name> "{" "}" => {
    ServiceTerm::new(Box::new(name), Vec::new())
  },
  "service" <name:Name> "{" <definitions:ServiceDefinitions> "}" => {
    ServiceTerm::new(Box::new(name), definitions)
  },
}

ServiceDefinitions: Vec<ServiceDefinition> = {
  <entity:Entity> => {
    let mut definitions: Vec<ServiceDefinition> = Vec::new();
    definitions.push(ServiceDefinition::Entity(entity));
    definitions
  },
  <action:Action> => {
    let mut definitions: Vec<ServiceDefinition> = Vec::new();
    definitions.push(ServiceDefinition::Action(action));
    definitions
  },
  <function:Function> => {
    let mut definitions: Vec<ServiceDefinition> = Vec::new();
    definitions.push(ServiceDefinition::Function(function));
    definitions
  },
  <type_definition:Type> => {
    let mut definitions: Vec<ServiceDefinition> = Vec::new();
    definitions.push(ServiceDefinition::Type(type_definition));
    definitions
  },
  <definitions:ServiceDefinitions> <entity:Entity> => {
    let mut new_definitions = Vec::new();
    new_definitions.extend(definitions);
    new_definitions.push(ServiceDefinition::Entity(entity));
    new_definitions
  },
  <definitions:ServiceDefinitions> <action:Action> => {
    let mut new_definitions = Vec::new();
    new_definitions.extend(definitions);
    new_definitions.push(ServiceDefinition::Action(action));
    new_definitions
  },
  <definitions:ServiceDefinitions> <function:Function> => {
    let mut new_definitions = Vec::new();
    new_definitions.extend(definitions);
    new_definitions.push(ServiceDefinition::Function(function));
    new_definitions
  },
  <definitions:ServiceDefinitions> <type_definition:Type> => {
    let mut new_definitions = Vec::new();
    new_definitions.extend(definitions);
    new_definitions.push(ServiceDefinition::Type(type_definition));
    new_definitions
  },
}

Entity: EntityTerm = {
  "entity" <name:Name> "{" "}" => {
    EntityTerm::new(Box::new(name), Vec::new(), Vec::new())
  },
  "entity" <name:Name> "{" <fields:Fields> "}" => {
    EntityTerm::new(Box::new(name), Vec::new(), fields)
  },
  "entity" <name:Name> ":" <aspects:AspectNames> "{" "}" => {
    EntityTerm::new(Box::new(name), aspects, Vec::new())
  },
  "entity" <name:Name> ":" <aspects:AspectNames> "{" <fields:Fields> "}" => {
    EntityTerm::new(Box::new(name), aspects, fields)
  }
}

AspectNames: Vec<NameTerm> = {
  <aspect_name:Name> => {
    let mut aspect_names: Vec<NameTerm> = Vec::new();
    aspect_names.push(aspect_name);
    aspect_names
  },
  <aspect_names:AspectNames> "," <aspect_name:Name> => {
    let mut new_aspect_names: Vec<NameTerm> = Vec::new();
    new_aspect_names.extend(aspect_names);
    new_aspect_names.push(aspect_name);
    new_aspect_names
  }
}

Fields: Vec<FieldTerm> = {
  <field:Field> => {
    let mut fields: Vec<FieldTerm> = Vec::new();
    fields.push(field);
    fields
  },
  <fields:Fields> <field:Field> => {
    let mut new_fields: Vec<FieldTerm> = Vec::new();
    new_fields.extend(fields);
    new_fields.push(field);
    new_fields
  }
}

Field: FieldTerm = {
  <name:Name> ":" <type_name:Name> ";" => FieldTerm::new(Box::new(name), Box::new(type_name))
}

Action: ActionTerm = {
  "action" <name:Name> "(" <params:Params> ")" ";" => {
    ActionTerm::new(Box::new(name), params, None)
  },
  "action" <name:Name> "(" <params:Params> ")" "returns" <returns:Returns> ";" => {
    ActionTerm::new(Box::new(name), params, Some(Box::new(returns)))
  }
};

Function: FunctionTerm = {
  "function" <name:Name> "(" ")" "returns" <returns:Returns> ";" => {
    FunctionTerm::new(Box::new(name), Vec::new(), Box::new(returns))
  },
  "function" <name:Name> "(" <params:Params> ")" "returns" <returns:Returns> ";" => {
    FunctionTerm::new(Box::new(name), params, Box::new(returns))
  }
};

Returns: ReturnsTerm = {
  <name:Name> => ReturnsTerm::new_scalar(Box::new(name)),
  "array" "of" <name:Name> => ReturnsTerm::new_arrayed(Box::new(name)),
}

Params: Vec<ParamTerm> = {
  <param:Param> => {
    let mut params: Vec<ParamTerm> = Vec::new();
    params.push(param);
    params
  },
  <params:Params> <param:Param> => {
    let mut new_params: Vec<ParamTerm> = Vec::new();
    new_params.extend(params);
    new_params.push(param);
    new_params
  },
}

Param: ParamTerm = {
  <name:Name> ":" <type_name:Name> => ParamTerm::new(Box::new(name), Box::new(type_name))
}

Type: TypeTerm = {
  "define" "type" <name:Name> ":" <resolved_type_name:Name> ";" => {
    TypeTerm::new(Box::new(name), Box::new(resolved_type_name))
  },
  "type" <name:Name> ":" <resolved_type_name:Name> ";" => {
    TypeTerm::new(Box::new(name), Box::new(resolved_type_name))
  }
}

Import: ImportTerm = {
  <start: @L> <using:Using> <selection_block:SelectionBlock> <from:From> <path:Path> <semi:Semicolumn> <end: @R> => {
    let location = Location::new(start, end, filepath);
    ImportTerm::new(
      location,
      Box::new(using),
      Box::new(selection_block),
      Box::new(from),
      Box::new(path),
      Box::new(semi)
    )
  }
}

SelectionBlock: SelectionBlockTerm = {
  <start: @L> <open_brace:OpenCurlyBrace> <selectors:Selectors> <close_brace:CloseCurlyBrace> <end: @R> => {
    let location = Location::new(start, end, filepath);
    SelectionBlockTerm::new(location, Some(Box::new(open_brace)), selectors, Some(Box::new(close_brace)))
  },
  <start: @L> <selectors:Selectors> <end: @R> => {
    let location = Location::new(start, end, filepath);
    SelectionBlockTerm::new(location, None, selectors, None)
  }
}

Selectors: Vec<SelectionBlockSegment> = {
  <selector:Selector> => vec![SelectionBlockSegment::Selector(selector)],
  <selector:Selector> <comma:Comma> => {
    vec![
      SelectionBlockSegment::Selector(selector),
      SelectionBlockSegment::Comma(comma)
    ]
  },
  <selector:Selector> <comma:Comma> <selectors:Selectors> => {
    let mut new_selectors: Vec<SelectionBlockSegment> = vec![
      SelectionBlockSegment::Selector(selector),
      SelectionBlockSegment::Comma(comma)
    ];
    new_selectors.extend(selectors);
    new_selectors
  },
}

Selector: SelectorTerm = {
  <start: @L> <import:ImportIdentifier> <end: @R> => {
    let location = Location::new(start, end, filepath);
    SelectorTerm::new(
      location,
      Box::new(import),
      None,
      None
    )
  },
  <start: @L> <import:ImportIdentifier> <as_term:As> <alias:Name> <end: @R> => {
    let location = Location::new(start, end, filepath);
    SelectorTerm::new(
      location,
      Box::new(import),
      Some(Box::new(as_term)),
      Some(Box::new(alias))
    )
  },
}

ImportIdentifier: ImportIdentifierTerm = {
  <start: @L> <name:Name> <end: @R> => {
    let location = Location::new(start, end, filepath);
    ImportIdentifierTerm::new(
      location,
      Box::new(
        ImportIdentifierVariant::NameOnly(
          Box::new(name)
        )
      )
    )
  },
  <start: @L> <name:Name> <dot:Dot> <wildcart:Wildcart> <end: @R> => {
    let location = Location::new(start, end, filepath);
    ImportIdentifierTerm::new(
      location,
      Box::new(
        ImportIdentifierVariant::NameWithWildcart {
          name: Box::new(name),
          dot: Box::new(dot),
          wildcart: Box::new(wildcart)
        }
      )
    )
  },
  <start: @L> <wildcart:Wildcart> <end: @R> => {
    let location = Location::new(start, end, filepath);
    ImportIdentifierTerm::new(
      location,
      Box::new(
        ImportIdentifierVariant::SelectAll(
          Box::new(wildcart),
        )
      )
    )
  },
}

OpenCurlyBrace: OpenCurlyBraceTerm = {
  <start: @L> "{" <end: @R> => {
    let location = Location::new(start, end, filepath);
    OpenCurlyBraceTerm::new(location)
  },
}

CloseCurlyBrace: CloseCurlyBraceTerm = {
  <start: @L> "}" <end: @R> => {
    let location = Location::new(start, end, filepath);
    CloseCurlyBraceTerm::new(location)
  },
}

Wildcart: WildcartTerm = {
  <start: @L> "*" <end: @R> => {
    let location = Location::new(start, end, filepath);
    WildcartTerm::new(location)
  },
}

Dot: DotTerm = {
  <start: @L> "." <end: @R> => {
    let location = Location::new(start, end, filepath);
    DotTerm::new(location)
  },
}

Comma: CommaTerm = {
  <start: @L> "," <end: @R> => {
    let location = Location::new(start, end, filepath);
    CommaTerm::new(location)
  },
}

Semicolumn: SemicolumnTerm = {
  <start: @L> ";" <end: @R> => {
    let location = Location::new(start, end, filepath);
    SemicolumnTerm::new(location)
  },
}

As: AsTerm = {
  <start: @L> "as" <end: @R> => {
    let location = Location::new(start, end, filepath);
    AsTerm::new(location)
  },
}

From: FromTerm = {
  "from" => FromTerm::new(),
}

Using: UsingTerm = {
  <start: @L> "using" <end: @R> => {
    let location = Location::new(start, end, filepath);
    UsingTerm::new(location)
  },
}

Path: PathTerm = {
  <value:r"`[a-zA-Z0-9-/[.]]+`"> => {
    let trimmed_value = value.to_string().trim_matches('`').to_string();
    PathTerm::new(PathBuf::from(trimmed_value))
  },
  <value:r"'[a-zA-Z0-9-/[.]]+'"> => {
    let trimmed_value = value.to_string().trim_matches('\'').to_string();
    PathTerm::new(PathBuf::from(trimmed_value))
  },
}

Name: NameTerm = {
  <value:r"[a-zA-Z0-9-]+"> => NameTerm::new(value.to_string())
}
